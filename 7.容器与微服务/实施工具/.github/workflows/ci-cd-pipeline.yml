name: 🚀 Container Microservices CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# 并行作业配置，支持多线程处理
jobs:
  # 作业1: 代码质量检查 (并行度: 高)
  code-quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [python, go, javascript, yaml, markdown]
        include:
          - language: python
            tools: [flake8, black, mypy, bandit]
          - language: go
            tools: [golangci-lint, go vet, go fmt]
          - language: javascript
            tools: [eslint, prettier, sonarqube]
          - language: yaml
            tools: [yamllint, checkov]
          - language: markdown
            tools: [markdownlint, vale]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🐹 Setup Go
      if: matrix.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: 🟨 Setup Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🔧 Install tools
      run: |
        case ${{ matrix.language }} in
          python)
            pip install ${{ join(matrix.tools, ' ') }}
            ;;
          go)
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
            ;;
          javascript)
            npm install -g ${{ join(matrix.tools, ' ') }}
            ;;
          yaml)
            pip install yamllint checkov
            ;;
          markdown)
            npm install -g markdownlint-cli vale
            ;;
        esac

    - name: 🔍 Run quality checks
      run: |
        case ${{ matrix.language }} in
          python)
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            black --check .
            mypy .
            bandit -r . -f json -o bandit-report.json
            ;;
          go)
            golangci-lint run
            go vet ./...
            go fmt ./...
            ;;
          javascript)
            eslint .
            prettier --check .
            ;;
          yaml)
            yamllint .
            checkov -d . --output json --output-file-path checkov-report
            ;;
          markdown)
            markdownlint "**/*.md"
            vale .
            ;;
        esac

    - name: 📊 Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports-${{ matrix.language }}
        path: |
          bandit-report.json
          checkov-report
        retention-days: 30

  # 作业2: 安全扫描 (并行度: 中)
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scan-type: [dependency, container, code, infrastructure]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run dependency scan
      if: matrix.scan-type == 'dependency'
      run: |
        # Python dependencies
        pip install safety
        safety check --json --output-file safety-report.json
        
        # Go dependencies
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... > govulncheck-report.txt
        
        # Node.js dependencies
        npm audit --audit-level=moderate --json > npm-audit-report.json

    - name: 🔍 Run container scan
      if: matrix.scan-type == 'container'
      run: |
        # Install Trivy
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb buster main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan Dockerfiles
        find . -name "Dockerfile" -exec trivy config {} --format json --output trivy-config-report.json \;
        find . -name "Dockerfile" -exec trivy fs {} --format json --output trivy-fs-report.json \;

    - name: 🔍 Run code scan
      if: matrix.scan-type == 'code'
      run: |
        # Install Semgrep
        python -m pip install semgrep
        
        # Run Semgrep
        semgrep scan --config auto --json --output semgrep-report.json

    - name: 🔍 Run infrastructure scan
      if: matrix.scan-type == 'infrastructure'
      run: |
        # Install Checkov
        pip install checkov
        
        # Scan infrastructure files
        checkov -d . --output json --output-file-path checkov-infra-report

    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ matrix.scan-type }}
        path: |
          *-report.json
          *-report.txt
          checkov-infra-report
        retention-days: 30

  # 作业3: 单元测试 (并行度: 高)
  unit-test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [python, go, javascript]
        include:
          - language: python
            test-framework: pytest
            coverage-tool: coverage
          - language: go
            test-framework: go test
            coverage-tool: go test -cover
          - language: javascript
            test-framework: jest
            coverage-tool: jest --coverage
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🐹 Setup Go
      if: matrix.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: 🟨 Setup Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📦 Install dependencies
      run: |
        case ${{ matrix.language }} in
          python)
            pip install -r requirements.txt
            pip install pytest pytest-cov coverage
            ;;
          go)
            go mod download
            ;;
          javascript)
            npm ci
            ;;
        esac

    - name: 🧪 Run tests
      run: |
        case ${{ matrix.language }} in
          python)
            pytest --cov=. --cov-report=xml --cov-report=html
            coverage report
            ;;
          go)
            go test -v -coverprofile=coverage.out ./...
            go tool cover -html=coverage.out -o coverage.html
            ;;
          javascript)
            npm test
            ;;
        esac

    - name: 📊 Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: test-reports-${{ matrix.language }}
        path: |
          coverage.xml
          coverage.html
          coverage.out
        retention-days: 30

  # 作业4: 集成测试 (并行度: 中)
  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-test]
    strategy:
      matrix:
        environment: [staging, testing]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Setup Docker
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build and test containers
      run: |
        # Build test containers
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ matrix.environment }} .
        
        # Run integration tests
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ matrix.environment }} \
          python -m pytest tests/integration/ -v

    - name: 📊 Upload integration test reports
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-reports-${{ matrix.environment }}
        path: test-results/
        retention-days: 30

  # 作业5: 性能测试 (并行度: 低)
  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install performance testing tools
      run: |
        pip install locust k6-python

    - name: 🚀 Run performance tests
      run: |
        # Run Locust performance tests
        locust -f tests/performance/locustfile.py --headless --users 100 --spawn-rate 10 --run-time 60s
        
        # Run k6 performance tests
        k6 run tests/performance/k6-script.js

    - name: 📊 Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-reports
        path: |
          locust-report.html
          k6-report.json
        retention-days: 30

  # 作业6: 构建和推送 (并行度: 中)
  build-and-push:
    name: 🏗️ Build and Push
    runs-on: ubuntu-latest
    needs: [performance-test]
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 作业7: 部署 (并行度: 低)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install deployment tools
      run: |
        pip install kubernetes kubectl

    - name: 🔑 Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

    - name: 🚀 Deploy to Kubernetes
      run: |
        # Apply Kubernetes manifests
        kubectl apply -f k8s/
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/container-microservices
        
        # Verify deployment
        kubectl get pods -l app=container-microservices

    - name: 🔍 Health check
      run: |
        # Wait for service to be ready
        kubectl wait --for=condition=ready pod -l app=container-microservices --timeout=300s
        
        # Run health checks
        kubectl exec deployment/container-microservices -- curl -f http://localhost:8080/health

  # 作业8: 通知 (并行度: 低)
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: 📧 Send email notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: "Container Microservices CI/CD Pipeline - ${{ job.status }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: "CI/CD Pipeline <${{ secrets.MAIL_USERNAME }}>"
        body: |
          Pipeline Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Run ID: ${{ github.run_id }}
          
          View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: 💬 Send Slack notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          Container Microservices CI/CD Pipeline
          Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}

# 工作流级别的并行控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
